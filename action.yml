name: "ESP Firmware CI Action"
description: "Build and test ESP firware"
inputs:
  pipeline-name:
    description: "A name identifying the calling pipeline"
    required: true
  device-name:
    description: "Device id as listed in test schedulers config file to run the test on test station"
    required: true
  teststation-broker-url:
    description: "IP:Port of MQTT broker where test station listens to"
    required: true
  master-topic:
    description: "teststation request is published to <master-topic>/request"
    required: false
    default: "teststation"
  test-name:
    description: "Name of the test to execute (must match an entry in the test schedulers config file)"
    required: true
  request-timeout:
    description: "Time in seconds to wait for teststation to become available"
    required: false
    default: "3600"
  access-token:
    description: "Personal access token for private repos"
    required: true
  tailscale-key:
    description: "a reusable & emphermeral yoda tailscale key"
    required: true
  minio-bucket:
    description: "bucket on minio to push test images to"
    required: false
    default: "esp-fw-testing"
  minio-access-key:
    description: "Access key for minio"
    required: true
  minio-secret-key:
    description: "Secret key for minio"
    required: true
  build-dfu:
    description: "Whether to build&release dfu binary"
    required: false
    default: "false"
  skip-test:
    description: "If set to true, don't attempt to test the image"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: "recursive"
        token: ${{ inputs.access-token }}
    - name: Get project and filename
      shell: bash
      id: identify
      env:
        EVENT_NAME: ${{ github.event_name }}
      run: |
        project=$(grep PKG_FIRMWARE_NAME fw-package.env | cut -f 2 -d =)
        echo "project=$(echo ${project})" >> $GITHUB_OUTPUT
    - name: Build firmware
      shell: bash
      id: build
      # Build firmware using same docker image as used in devcontainer or gitpod to have exactly same environment as for local builds
      # The chown -R 33333 ensures that the gitpod user in the gitpod-esp can access and create files in the repo
      run: |
        if [ -f .devcontainer/devcontainer.json ]; then
            builder_image=$(jq -r '.image' .devcontainer/devcontainer.json)
            echo "devcontainer.json exists, builder image is $builder_image"
            build_cmd="source /opt/esp/idf/export.sh && cd /src/ && git config --global --add safe.directory /src && idf.py build"
        elif [ -f .gitpod.yml ]; then
            builder_image=$(grep gitpod-esp: .gitpod.yml | awk '{print $2}')
            echo "gitpod.yml exists, builder image is $builder_image"
            build_cmd="source /home/gitpod/esp/idf/export.sh && cd /src/ && idf.py build"
            sudo chown -R 33333 .
        else
            echo "No devcontainer.json or .gitpod.yml found, exiting"
            exit 1
        fi

        build_dfu=${{ inputs.build-dfu }}
        if [ "${build_dfu}" = "true" ]; then
          build_cmd="${build_cmd} && idf.py dfu"
        fi

        docker run -v $(pwd):/src ${builder_image} bash -c "${build_cmd}"

        sudo chown -R runner .
        version=$(awk 'match($0,/PROJECT_VER=\\"[\.a-z0-9\-]+\\"/) { print substr($0,RSTART+14,RLENGTH-16)}' build/build.ninja)
        project=${{ steps.identify.outputs.project }}
        fwfile=${project}-${version}.bin
        cp build/${project}.bin build/${fwfile}

        dfu_file=""
        if [ "${build_dfu}" = "true" ]; then
          dfu_file="build/${fwfile}.dfu.bin"
          cp build/dfu.bin ${dfu_file}
        fi
        echo "fwfile=${fwfile}" >> $GITHUB_OUTPUT
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "dfu_file=${dfu_file}" >> $GITHUB_OUTPUT
    - name: Package
      shell: bash
      id: fwpkg
      run: |
        ./make-firmware-pkg.sh
        fwpkg=$(ls build/*.fwpkg)
        echo "fwpkg=${fwpkg}" >> $GITHUB_OUTPUT
        mkdir -p minio
        cp ${fwpkg} minio/
    - name: Upload for testing
      uses: hkdobrev/minio-deploy-action@v1.1
      with:
        endpoint: https://minio.ci4rail.com
        access_key: ${{ inputs.minio-access-key }}
        secret_key: ${{ inputs.minio-secret-key }}
        bucket: ${{ inputs.minio-bucket }}
        source_dir: minio
        target_dir: "/"
    - name: Test
      uses: ci4rail/teststation-action@v4
      if: inputs.skip-test == 'false'
      with:
        pipeline-name: "${{ github.repository }}"
        # This name is resolved by tailscale magic DNS
        mqtt-broker-url: ${{ inputs.teststation-broker-url}}
        master-topic: ${{ inputs.master-topic}}
        test-name: ${{ inputs.test-name }}
        artifact-override: |
          {
            \"desired_versions.${{ inputs.device-name }}.name\": \"${{ steps.identify.outputs.project }}\",
            \"desired_versions.${{ inputs.device-name }}.version\": \"${{ steps.build.outputs.version }}\",
            \"desired_versions.${{ inputs.device-name }}.source.type\": \"ci4rail-minio\",
            \"desired_versions.${{ inputs.device-name }}.source.bucket\": \"${{ inputs.minio-bucket }}\",
            \"desired_versions.${{ inputs.device-name }}.source.filetype\": \"fwpkg\"
          }
        request-timeout: ${{ inputs.request-timeout }}
        access-token: ${{ inputs.access-token }}
        # must be a reusable, emphemeral key!
        tailscale-key: ${{ inputs.tailscale-key }}

    - name: Release
      uses: softprops/action-gh-release@v1
      # no release for pull-requests
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          build/${{ steps.build.outputs.fwfile }}
          ${{ steps.build.outputs.dfu_file }}
          ${{ steps.fwpkg.outputs.fwpkg }}
