name: ESP32 Secure App Workflow

on:
  workflow_call:
    inputs:
      firmware_signing_azure_subscription_id:
        required: true
        type: string
      firmware_signing_azure_tenant_id:
        required: true
        type: string
      build-dfu:
        description: "Whether to build dfu binary"
        required: false
        type: boolean
        default: false
      teststation-broker:
        description: "IP:Port of MQTT broker where test station listens to"
        type: string
        required: true
      teststation-master-topic:
        description: "teststation request is published to <master-topic>/request"
        required: false
        type: string
        default: "teststation"
      teststation-request-timeout:
        description: "Time in seconds to wait for teststation to become available"
        required: false
        type: number
        default: 3600
      test-name:
        description: |
          Name of the test to execute (must match an entry in the test schedulers config file)
          If empty, skip test execution
        type: string
        required: true
      test-device-name:
        description: "Device id as listed in test schedulers config file to run the test on test station"
        type: string
        required: true
      target-commitish:
        description: "The commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Default: the repository's default branch (usually main)."
        type: string
        required: false
        default: ""

    secrets:
      access-token:
        description: "Personal access token for private repos"
        required: true
      tailscale-key:
        description: "a reusable tailscale key"
        required: true
      minio-access-key:
        description: "Access key for minio"
        required: true
      minio-secret-key:
        description: "Secret key for minio"
        required: true

jobs:
  build:
    runs-on: [self-hosted, linux, x64]

    outputs:
      project-name: ${{ steps.build_app.outputs.project-name }}
      version: ${{ steps.build_app.outputs.version }}
      app-file: ${{ steps.build_app.outputs.app-file }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          token: ${{ secrets.access-token }}

      - name: Get builder image
        id: get_builder
        uses: ci4rail/fw_esp-action/actions/get_builder_image@v10

      - name: Build App
        id: build_app
        uses: ci4rail/fw_esp-action/actions/build_app@v10        
        with:
          devcontainer-image: ${{ steps.get_builder.outputs.builder-image }}
          app-build-command: make build-secure
          build-dfu: ${{ inputs.build-dfu }}

      - name: Upload build outputs to artifact storage
        uses: actions/upload-artifact@v4
        with:
          name: build_output
          path: |
            ${{ steps.build_app.outputs.app-file-path }}

  sign:
    needs: build
    permissions:
      id-token: write # required for OIDC
      contents: read
    runs-on: [self-hosted, linux, x64]
    strategy:
      matrix:
        env:
          - name: staging
          - name: production
    environment: ${{ matrix.env.name }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build_output
          path: in/

      - name: Generate signature
        id: gen_signature
        uses: ci4rail/fw_esp-action/actions/azure_key_vault_sign@v10
        with:
          binary: in/${{ needs.build.outputs.app-file }}
          azure_subscription_id: ${{ inputs.firmware_signing_azure_subscription_id }}
          azure_tenant_id: ${{ inputs.firmware_signing_azure_tenant_id }}
          azure_app_id: ${{ vars.FIRMWARE_SIGNING_AZURE_APP_ID }}
          key_id_base: ${{ vars.FIRMWARE_SIGNING_AZURE_KEY_ID }}
          num_keys: 1

      - name: Sign image with espsecure 
        id: sign
        uses: ci4rail/fw_esp-action/actions/esp_sign@v10
        with:
          binary: in/${{ needs.build.outputs.app-file }}
          key_id_base: ${{ vars.FIRMWARE_SIGNING_AZURE_KEY_ID }}
          num_keys: 1

      - name: Create firmware package
        id: create_fwpkg
        uses: ci4rail/fw_esp-action/actions/create_firmware_package@v10
        with:
          output-file-suffix: ${{ matrix.env.name }}
          app-binary: ${{ steps.sign.outputs.signed-binary-path }}
          project-name: ${{ needs.build.outputs.project-name }}
          version: ${{ needs.build.outputs.version }}

      - name: Upload firmware packages to artifact storage
        uses: actions/upload-artifact@v4
        with:
          name: fwpkg-${{ matrix.env.name }}
          path: |
            ${{ steps.create_fwpkg.outputs.fwpkg }}
          retention-days: 2

  # Execute steps in an github runner (not selfhosted)
  # Furthermore, teststation-action uses tailscale to access test stations, which won't run in selfhosted dind runner
  test-staging:
    if: inputs.test-name != ''
    needs: [build, sign]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [staging]   # only staging
    environment: ${{ matrix.env }}    
    steps:
      - name: Resolve artifact ID by name
        id: art
        env:
          GH_TOKEN: ${{ github.token }}
          NAME: fwpkg-staging
        run: |
          id=$(gh api \
            repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
            -F name="$NAME" \
            -q '.artifacts[0].id // empty')
          test -n "$id" || { echo "artifact '$NAME' not found"; exit 1; }
          echo "id=$id" >> "$GITHUB_OUTPUT"
          
      - name: Test firmware package for development
        uses: ci4rail/teststation-action@v5
        with:
          pipeline-name: "${{ github.run_id }}"
          mqtt-broker-url: "${{ inputs.teststation-broker }}"
          test-name: ${{ inputs.test-name }}
          artifact-override: |
            {
              \"desired_versions.${{ inputs.test-device-name }}.name\": \"${{ needs.build.outputs.project-name }}\",
              \"desired_versions.${{ inputs.test-device-name }}.version\": \"${{ needs.build.outputs.version }}\",
              \"desired_versions.${{ inputs.test-device-name }}.source.type\": \"github-artifacts\",
              \"desired_versions.${{ inputs.test-device-name }}.source.url\": \"https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ steps.art.outputs.id }}/zip\",
              \"desired_versions.${{ inputs.test-device-name }}.source.filetype\": \"fwpkg\"
            }
          access-token: ${{ secrets.access-token }}
          tailscale-key: ${{ secrets.tailscale-key }}
          request-timeout: ${{ inputs.teststation-request-timeout }}
          minio_access_key: ${{ secrets.minio-access-key }}
          minio_secret_key: ${{ secrets.minio-secret-key }}

  release:
    needs: [build, test-staging]
    if: ${{ always() && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - name: Download firmware packages
        uses: actions/download-artifact@v4
        with:
          pattern: fwpkg-*
          path: ./artifacts
          merge-multiple: true

      - shell: bash
        run: ls -l artifacts

      - name: Create Release in this Repo
        uses: ci4rail/fw_esp-action/actions/release@v10
        with:
          target_commitish: ${{ inputs.target-commitish }}
          assets: |
            artifacts/*
