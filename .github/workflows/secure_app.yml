name: ESP32 Secure App Workflow

on:
  workflow_call:
    inputs:
      firmware_signing_azure_subscription_id:
        required: true
        type: string
      firmware_signing_azure_tenant_id:
        required: true
        type: string
      build-dfu:
        description: "Whether to build dfu binary"
        required: false
        type: boolean
        default: false
      teststation-broker:
        description: "IP:Port of MQTT broker where test station listens to"
        type: string
        required: true
      teststation-master-topic:
        description: "teststation request is published to <master-topic>/request"
        required: false
        type: string
        default: "teststation"
      teststation-request-timeout:
        description: "Time in seconds to wait for teststation to become available"
        required: false
        type: number
        default: 3600
      test-name:
        description: |
          Name of the test to execute (must match an entry in the test schedulers config file)
          If empty, skip test execution
        type: string
        required: true
      test-device-name:
        description: "Device id as listed in test schedulers config file to run the test on test station"
        type: string
        required: true
      target-commitish:
        description: "The commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Default: the repository's default branch (usually main)."
        type: string
        required: false
        default: ""
      minio-bucket:
        description: "bucket on minio to push test images to"
        type: string
        required: false
        default: "esp-fw-testing"
      bootloader-repo:
        description: "Repository where to get bootloader from"
        type: string
        required: true
      bootloader-release-tag:
        description: "Release tag for the bootloader"
        type: string
        required: true
      public-release-repo:
        description: "Public release repository. (don't publish if empty)"
        type: string
        required: false
        default: ""
      license-contact:
        description: "License contact email"
        type: string
        required: true
      company:
        description: "Company name"
        type: string
        required: true

    secrets:
      access-token:
        description: "Personal access token for private repos"
        required: true
      tailscale-key:
        description: "a reusable tailscale key"
        required: true
      minio-access-key:
        description: "Access key for minio"
        required: true
      minio-secret-key:
        description: "Secret key for minio"
        required: true

jobs:
  build:
    runs-on: [self-hosted, linux, x64]

    outputs:
      project-name: ${{ steps.build_app.outputs.project-name }}
      version: ${{ steps.build_app.outputs.version }}
      app-file: ${{ steps.build_app.outputs.app-file }}
      chip: ${{ steps.build_app.outputs.chip }}
      sbom: ${{ steps.licensing.outputs.sbom }}
      licenses: ${{ steps.licensing.outputs.licenses }}
      notices: ${{ steps.licensing.outputs.notices }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          token: ${{ secrets.access-token }}

      - name: Start esp-idf Devcontainer
        uses: ci4rail/fw_esp-action/actions/setup_devcontainer@v10

      - name: Build App
        id: build_app
        uses: ci4rail/fw_esp-action/actions/build_app@v10        
        with:
          app-build-command: make build-secure
          build-dfu: ${{ inputs.build-dfu }}

      - name: Generate Licensing Info
        uses: ci4rail/fw_esp-action/actions/licensing@v10
        id: licensing
        with:
          build-dir: ${{ steps.build_app.outputs.build-dir }}
          project-name: ${{ steps.build_app.outputs.project-name }}
          version: ${{ steps.build_app.outputs.version }}
          license-contact: ${{ inputs.license-contact }}
          company: ${{ inputs.company }}

      - name: Upload build outputs to artifact storage
        uses: actions/upload-artifact@v4
        with:
          name: build_output
          path: |
            ${{ steps.build_app.outputs.app-file-path }}
            ${{ steps.build_app.outputs.build-dir}}/partition_table/partition-table.bin
            ${{ steps.build_app.outputs.build-dir}}/ota_data_initial.bin
            ${{ steps.build_app.outputs.build-dir}}/flash_project_args
            ${{ steps.licensing.outputs.sbom }}
            ${{ steps.licensing.outputs.licenses }}
            ${{ steps.licensing.outputs.notices }}

      - name: tear down devcontainer
        if: ${{ always() }}
        uses: ci4rail/fw_esp-action/actions/teardown_devcontainer@v10

  sign:
    needs: build
    permissions:
      id-token: write # required for OIDC
      contents: read
    runs-on: [self-hosted, linux, x64]
    strategy:
      matrix:
        env:
          - name: staging
          - name: production
    environment: ${{ matrix.env.name }}
    steps:
      # we need to checkout repo, as we need devcontainer.json
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start esp-idf Devcontainer
        uses: ci4rail/fw_esp-action/actions/setup_devcontainer@v10

      - uses: actions/download-artifact@v4
        with:
          name: build_output
          path: in/

      - name: List Files
        run: |
          ls -l in/

      - name: Generate signature
        id: gen_signature
        uses: ci4rail/fw_esp-action/actions/azure_key_vault_sign@v10
        with:
          binary: in/${{ needs.build.outputs.app-file }}
          azure_subscription_id: ${{ inputs.firmware_signing_azure_subscription_id }}
          azure_tenant_id: ${{ inputs.firmware_signing_azure_tenant_id }}
          azure_app_id: ${{ vars.FIRMWARE_SIGNING_AZURE_APP_ID }}
          key_ids: ${{ vars.FIRMWARE_SIGNING_AZURE_KEY_ID }}

      - name: Sign image with espsecure 
        id: sign
        uses: ci4rail/fw_esp-action/actions/esp_sign@v10
        with:
          binary: in/${{ needs.build.outputs.app-file }}

      - name: Create firmware package
        id: create_fwpkg
        uses: ci4rail/fw_esp-action/actions/create_firmware_package@v10
        with:
          output-file-suffix: ${{ matrix.env.name }}
          app-binary: ${{ steps.sign.outputs.signed-binary-path }}
          project-name: ${{ needs.build.outputs.project-name }}
          version: ${{ needs.build.outputs.version }}


      - name: Download bootloader
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ inputs.bootloader-repo }}
          tag: ${{ inputs.bootloader-release-tag }}
          token: ${{ secrets.access-token }}
          fileName: "*"
          out-file-path: in/

      - name: Build Merged Factory binary
        uses: ci4rail/fw_esp-action/actions/factory_image@v10
        with:
          chip: ${{ needs.build.outputs.chip }}
          build-dir: in/
          app-file: ${{ steps.sign.outputs.signed-binary-file }}
          bootloader-file-pattern: "*bootloader*-${{ matrix.env.name }}.bin"
          output-file: ${{ needs.build.outputs.project-name }}-${{ needs.build.outputs.version }}-${{ matrix.env.name }}-factory.bin

      - name: Upload firmware packages to artifact storage
        uses: actions/upload-artifact@v4
        with:
          name: fwpkg-${{ matrix.env.name }}
          path: |
            ${{ steps.create_fwpkg.outputs.fwpkg }}
            in/${{ needs.build.outputs.project-name }}-${{ needs.build.outputs.version }}-${{ matrix.env.name }}-factory.bin
          retention-days: 2

      - name: tear down devcontainer
        if: ${{ always() }}
        uses: ci4rail/fw_esp-action/actions/teardown_devcontainer@v10


  # Execute steps in an github runner (not selfhosted)
  # Furthermore, teststation-action uses tailscale to access test stations, which won't run in selfhosted dind runner
  test-staging:
    if: inputs.test-name != ''
    needs: [build, sign]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [staging]   # only staging
    environment: ${{ matrix.env }}    
    steps:
      - name: Excecute Test on Test station
        uses: ci4rail/fw_esp-action/actions/test@v10
        id: test
        with:
          teststation-broker: ${{ inputs.teststation-broker }}
          teststation-master-topic: ${{ inputs.teststation-master-topic }}
          teststation-request-timeout: ${{ inputs.teststation-request-timeout }}
          test-name: ${{ inputs.test-name }}
          test-device-name: ${{ inputs.test-device-name }}
          minio-access-key: ${{ secrets.minio-access-key }}
          minio-secret-key: ${{ secrets.minio-secret-key }}
          minio-bucket: ${{ inputs.minio-bucket }}
          access-token: ${{ secrets.access-token }}
          tailscale-key: ${{ secrets.tailscale-key }}
          project-name: ${{ needs.build.outputs.project-name }}
          version: ${{ needs.build.outputs.version }}

  release:
    needs: [build, sign, test-staging]
    if: ${{ always() && (github.ref_type == 'tag') && (needs.test-staging.result == 'success' || needs.test-staging.result == 'skipped') && (needs.build.result == 'success') && (needs.sign.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Download firmware packages
        uses: actions/download-artifact@v5
        with:
          pattern: fwpkg-*
          path: ./artifacts
          merge-multiple: true

      - shell: bash
        run: ls -l artifacts

      - name: Create Release in this Repo
        uses: ci4rail/fw_esp-action/actions/release@v10
        with:
          target_commitish: ${{ inputs.target-commitish }}
          assets: |
            artifacts/*
            artifacts/in/*
