name: ESP32 Secure App Workflow

permissions:
  id-token: write # required for OIDC
  contents: read

on:
  workflow_call:
    inputs:
      firmware_signing_azure_subscription_id:
        required: true
        type: string
      firmware_signing_azure_tenant_id:
        required: true
        type: string
      firmware_signing_azure_dev_app_id:
        required: true
        type: string
      firmware_signing_azure_dev_key_id:
        description: "ID for the development key used for signing firmware. e.g. https://firmware-key-test.vault.azure.net/keys/ci4rail-sio06-00-g0"
        required: true
        type: string
      firmware_signing_azure_prod_app_id:
        required: true
        type: string
      firmware_signing_azure_prod_key_id:
        description: "ID for the production key used for signing firmware. e.g. https://vault-firmware-signing.vault.azure.net/keys/ci4rail-sio06-00-g0"
        required: true
        type: string
      build-dfu:
        description: "Whether to build dfu binary"
        required: false
        type: boolean
        default: false
      teststation-broker:
        description: "IP:Port of MQTT broker where test station listens to"
        type: string
        required: true
      teststation-master-topic:
        description: "teststation request is published to <master-topic>/request"
        required: false
        type: string
        default: "teststation"
      teststation-request-timeout:
        description: "Time in seconds to wait for teststation to become available"
        required: false
        type: number
        default: 3600
      test-name:
        description: |
          Name of the test to execute (must match an entry in the test schedulers config file)
          If empty, skip test execution
        type: string
        required: true
      test-device-name:
        description: "Device id as listed in test schedulers config file to run the test on test station"
        type: string
        required: true
      
    secrets:
      access-token:
        description: "Personal access token for private repos"
        required: true
      tailscale-key:
        description: "a reusable tailscale key"
        required: true
      minio-access-key:
        description: "Access key for minio"
        required: true
      minio-secret-key:
        description: "Secret key for minio"
        required: true

jobs:
  get_builder:
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          token: ${{ secrets.access-token }}
      - name: Get builder image
        id: get_builder
        uses: ci4rail/fw_esp-action/actions/get_builder_image@v10
    outputs:
      builder-image: ${{ steps.get_builder.outputs.builder-image }}

  build:
    needs: get_builder
    runs-on: [self-hosted, linux, x64]
    container:
      image: ${{ needs.get_builder.outputs.builder-image }}
      options: -v /runner:/runner
    outputs:
      project-name: ${{ steps.build_app.outputs.project-name }}
      version: ${{ steps.build_app.outputs.version }}
      artifact-id: ${{ steps.upload_artifact.outputs.artifact-id }}
      dev-app: ${{ steps.duplicate_build_output.outputs.dev-app }}
      prod-app: ${{ steps.duplicate_build_output.outputs.prod-app }}
    steps:
      - uses: ci4rail/fw_esp-action/actions/setup-devcontainer@v10
      - name: Build App
        id: build_app
        uses: ci4rail/fw_esp-action/actions/build_app@v10
        with:
          app-build-command: make build-secure
          build-dfu: ${{ inputs.build-dfu }}

      - name: Duplicate build output
        shell: bash
        id: duplicate_build_output
        run: |
          filename_dev=$(basename ${{ steps.build_app.outputs.app-file }})
          filename_dev=${{ steps.build_app.outputs.build-dir }}/${filename_dev%.*}-dev.bin
          runuser -u hostusr -- bash -lc "cp ${{ steps.build_app.outputs.app-file }} $filename_dev"
          echo "dev-app=${filename_dev}" >> $GITHUB_OUTPUT
          echo "prod-app=${{ steps.build_app.outputs.app-file }}" >> $GITHUB_OUTPUT

  akv_sign:
    needs: build
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Generate signature for development
        id: sign_app_dev
        uses: ci4rail/fw_esp-action/actions/azure_key_vault_sign@v10
        with:
          binary: ${{ needs.build.outputs.dev-app }}
          azure_subscription_id: ${{ inputs.firmware_signing_azure_subscription_id }}
          azure_tenant_id: ${{ inputs.firmware_signing_azure_tenant_id }}
          azure_app_id: ${{ inputs.firmware_signing_azure_dev_app_id }}
          key_id_base: ${{ inputs.firmware_signing_azure_dev_key_id }}
          num_keys: 1

      - name: Generate signature for production
        id: sign_app_prod
        uses: ci4rail/fw_esp-action/actions/azure_key_vault_sign@v10
        with:
          binary: ${{ needs.build.outputs.prod-app }}
          azure_subscription_id: ${{ inputs.firmware_signing_azure_subscription_id }}
          azure_tenant_id: ${{ inputs.firmware_signing_azure_tenant_id }}
          azure_app_id: ${{ inputs.firmware_signing_azure_prod_app_id }}
          key_id_base: ${{ inputs.firmware_signing_azure_prod_key_id }}
          num_keys: 1

  esp_sign:
    needs: [get_builder, akv_sign, build]
    runs-on: [self-hosted, linux, x64]
    container:
      image: ${{ needs.get_builder.outputs.builder-image }}
      options: -v /runner:/runner
    outputs:
      fwpkg-dev: ${{ steps.create_fwpkg_dev_var.outputs.fwpkg-dev }}
      fwpkg: ${{ steps.create_fwpkg_prod.outputs.fwpkg }}
    steps:
      - uses: ci4rail/fw_esp-action/actions/setup-devcontainer@v10
      - name: Sign App for development
        id: sign_app_dev
        uses: ci4rail/fw_esp-action/actions/esp_sign@v10
        with:
          binary: ${{ needs.build.outputs.dev-app }}
          key_id_base: ${{ inputs.firmware_signing_azure_dev_key_id }}
          num_keys: 1
      - name: Sign App for production
        id: sign_app_prod
        uses: ci4rail/fw_esp-action/actions/esp_sign@v10
        with:
          binary: ${{ needs.build.outputs.prod-app }}
          key_id_base: ${{ inputs.firmware_signing_azure_prod_key_id }}
          num_keys: 1

      - name: Create firmware package for development
        id: create_fwpkg_dev
        uses: ci4rail/fw_esp-action/actions/create_firmware_package@v10
        with:
          output-file-suffix: -dev
          app-binary: ${{ needs.build.outputs.dev-app }}
          project-name: ${{ needs.build.outputs.project-name }}
          version: ${{ needs.build.outputs.version }}

      - name: Create fwpgk-dev var
        shell: bash
        id: create_fwpkg_dev_var
        run: |
          echo "fwpkg-dev=${{ steps.create_fwpkg_dev.outputs.fwpkg }}" >> $GITHUB_OUTPUT

      - name: Create firmware package for production
        id: create_fwpkg_prod
        uses: ci4rail/fw_esp-action/actions/create_firmware_package@v10
        with:
          output-file-suffix: -prod
          app-binary: ${{ needs.build.outputs.prod-app }}
          project-name: ${{ needs.build.outputs.project-name }}
          version: ${{ needs.build.outputs.version }}

  upload:
    needs: [build, esp_sign]
    runs-on: [self-hosted, linux, x64]
    outputs:
      artifact-id: ${{ steps.upload_artifact.outputs.artifact-id }}
    steps:
      - name: Upload firmware package for testing
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: fwpkg-dev
          path: ${{ needs.esp_sign.outputs.fwpkg-dev }}
          retention-days: 14

  # Run test in separate job, so that selfhosted runner is not blocked
  # Furthermore, teststation-action uses tailscale to access test stations, which won't run in selfhosted dind runner
  test:
    if: inputs.test-name != ''
    needs: [build, upload]
    runs-on: ubuntu-latest
    steps:
      - name: Test firmware package for development
        uses: ci4rail/teststation-action@v5
        with:
          pipeline-name: "${{ github.run_id }}"
          mqtt-broker-url: "${{ inputs.teststation-broker }}"
          test-name: ${{ inputs.test-name }}
          artifact-override: |
            {
              \"desired_versions.${{ inputs.test-device-name }}.name\": \"${{ needs.build.outputs.project-name }}\",
              \"desired_versions.${{ inputs.test-device-name }}.version\": \"${{ needs.build.outputs.version }}\",
              \"desired_versions.${{ inputs.test-device-name }}.source.type\": \"github-artifacts\",
              \"desired_versions.${{ inputs.test-device-name }}.source.url\": \"https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ needs.upload.outputs.artifact-id }}/zip\",
              \"desired_versions.${{ inputs.test-device-name }}.source.filetype\": \"fwpkg\"
            }
          access-token: ${{ secrets.access-token }}
          tailscale-key: ${{ secrets.tailscale-key }}
          request-timeout: ${{ inputs.teststation-request-timeout }}
          minio_access_key: ${{ secrets.minio-access-key }}
          minio_secret_key: ${{ secrets.minio-secret-key }}

